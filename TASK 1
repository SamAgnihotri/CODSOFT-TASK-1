import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
data_titanic = pd.read_csv(r"C:\Users\Dell\Desktop\Titanic_Case_Study\train.csv")
data_titanic.head()
data_titanic.shape
data_titanic.info()
data_titanic.isnull().sum()
data_titanic = data_titanic.drop(columns="Cabin", axis=1)
data_titanic
data_titanic.describe()
data_titanic["Age"].fillna(data_titanic["Age"].mean(), inplace=True)
data_titanic.describe()
print(data_titanic["Embarked"].mode())
print(data_titanic["Embarked"].mode()[0])
data_titanic["Embarked"].fillna(data_titanic["Embarked"].mode()[0], inplace=True)
data_titanic.isnull().sum()
data_titanic.describe()
data_titanic["Survived"].value_counts()
sns.set()
sns.countplot('Survived', data=data_titanic)
sns.countplot('Sex', data=data_titanic)
sns.countplot('Sex', hue="Survived", data=data_titanic)
sns.countplot('Pclass', data=data_titanic)
sns.countplot('Embarked', data=data_titanic)
sns.distplot(data_titanic['Age'])
sns.distplot(data_titanic['Fare'])
corr = data_titanic.corr()
plt.figure(figsize=(15, 9))
sns.heatmap(corr, annot=True, cmap='coolwarm')
data_titanic.head()
data_titanic = data_titanic.drop(columns=['Name', 'Ticket'], axis=1)
data_titanic.head()
data_titanic["Sex"].value_counts()
data_titanic['Embarked'].value_counts()
from sklearn.preprocessing import LabelEncoder
cols = ['Sex', 'Embarked']
le = LabelEncoder()

for col in cols:
    data_titanic[col] = le.fit_transform(data_titanic[col])
data_titanic.head()
X = data_titanic.drop(columns = ['PassengerId','Survived'],axis=1)
Y = data_titanic['Survived']
print(X)
print(Y)
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)
print(X.shape, X_train.shape, X_test.shape)
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
model = LogisticRegression()
data_titanic.info()
data_titanic.astype({'Age':'int','Fare':'int'}).dtypes
model.fit(X_train, Y_train)
X_train_prediction = model.predict(X_train)
print(X_train_prediction)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy_score_of_training_data : ', training_data_accuracy)
X_test_prediction = model.predict(X_test)
print(X_test_prediction)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy_score_of_test data : ', test_data_accuracy)



























